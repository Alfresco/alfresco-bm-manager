#/**
# * Factory bean for {@link TestProperty test property definitions}.
# * <p/>
# * This factory picks up all loaded properties passed to it and uses a naming convention
# * to isolate test property defaults and related values.
# * <p/>
# * So, if a property <b>abc</b> is required by the test, then the following needs to be
# * put into a properties file; the search for additional properties files is
# * <b>classpath:config/defaults/*.properties</b>:
# * <ul>
# *  <li>${test.projectName}.abc.default=Some default</li>
# *  <li>${test.projectName}.abc.group=Group name: properties can be logically ordered by into groups for display purposes</li>
# *  <li>${test.projectName}.abc.title=Label or title</li>
# *  <li>${test.projectName}.abc.description=Help text</li>
# *  <li>${test.projectName}.abc.type=int/string/decimal/boolean</li>
# *  <li>${test.projectName}.abc.min=Minimum value or minimum length</li>
# *  <li>${test.projectName}.abc.max=Maximum value or maximum length</li>
# *  <li>${test.projectName}.abc.hide=true to hide the value when test runs values are recorded e.g. password=*****</li>
# * </ul>
# * Common properties are inherited from properties with the <b>common</b> prefix.
# * Any project-specific properties are appended or overwrite common properties.
# * <p/>
# * Default values are overwritten by any system-defined properties that might have been supplied.
# * <p/>
# * The factory collates all the properties and builds a map of test properties grouped by <i>property name</i> 
# * 
# * @author Derek Hulley
# * @since 2.0
# */

# Some rubbish that should just be ignored
.default=CRUD DEFAULT
crud.default=MORE CRUD DEFAULT
crud..default=YET MORE CRUD
crud.one.group=GROUP CRUD
sample.one&&str.default=INVALID NAME

# A complete definition of a string
sample.one.str.default=ONE DEFAULT
sample.one.str.group=GROUP A
sample.one.str.title=One Title (String)
sample.one.str.description=One description (String)
sample.one.str.type=string
sample.one.str.min=-1
sample.one.str.max=256
sample.one.str.mask=true
sample.one.str.hide=false
# A complete definition of an int
sample.one.int.default=123
sample.one.int.group=GROUP A
sample.one.int.title=One Title (Integer)
sample.one.int.description=One description (Integer)
sample.one.int.type=int
sample.one.int.min=0
sample.one.int.max=256
# A complete definition of a decimal
sample.one.dec.default=123.456
sample.one.dec.group=GROUP A
sample.one.dec.title=One Title (Decimal)
sample.one.dec.description=One description (Decimal)
sample.one.dec.type=decimal
sample.one.dec.min=-5.4
sample.one.dec.max=+5.4
# A complete definition of a boolean
sample.one.boolean.default=true
sample.one.boolean.group=GROUP A
sample.one.boolean.title=One Title (Boolean)
sample.one.boolean.description=One description (Boolean)
sample.one.boolean.type=boolean

# Rely on defaults
sample.two.str.default=${one.str}
sample.two.int.default=${one.int}
sample.two.int.type=int
sample.two.dec.default=${one.dec}
sample.two.dec.type=decimal
sample.two.boolean.default=${one.boolean}
sample.two.boolean.type=boolean

# Ignored if the '.default' value is not present
sample.three.group=GROUP A
sample.three.title=Three Title
sample.three.description=Three description
sample.three.type=string
sample.three.min=0
sample.three.max=256
sample.three.hide=false

# Common 'four' definition
common.four.default=FOUR DEFAULT COMMON
#common.four.group=
common.four.title=Four Title Common
common.four.description=Four description from ''common''
common.four.type=string
common.four.min=0
common.four.max=255
common.four.hide=false

# Overrides the 'four' definition from 'common'
sample.four.default=0
sample.four.group=GROUP B
sample.four.title=Four Title
sample.four.description=Four description
sample.four.type=int
sample.four.min=0
sample.four.max=65535
sample.four.hide=true
